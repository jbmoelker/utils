---
import {validatePostRequest} from '../../dist/form-tools/post.js';
import {validateSelect} from '../../dist/components/select.js';
import {getSelectValue} from '../../dist/components/select.js';
import getContext from '@astro-utils/context';
import Context from '@astro-utils/context/Context.astro';
import type { HTMLAttributes } from 'astro/types';

export interface Props<T extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>> extends HTMLAttributes<'select'> {
    name: string
    errorMessage?: string
    type?: 'string' | 'number' | 'date',
    as?: T;
    props?: React.ComponentProps<T>;
};

const {bind, method} = getContext(Astro, '@astro-utils/forms');

const {as: asComponent = 'select', props: componentProps, value: defaultValue, ...props} = Astro.props;
let value = bind[Astro.props.name] ?? defaultValue;

if (!Astro.props.disabled && method === 'POST' && await validatePostRequest(Astro as any)) {
    await validateSelect(Astro, bind);
    value = await getSelectValue(Astro);
}


const isValueNotArray = !Array.isArray(value);
if (isValueNotArray) {
    value = value != null ? [value] : [];
}

const Component = asComponent as any;
---
<Context name={Astro.props.name} value={value} allowSelected={isValueNotArray} contextName="@astro-utils/forms">
    <Component {...props} {...componentProps}>
        <slot/>
    </Component>
</Context>
