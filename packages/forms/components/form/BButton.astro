---
import getContext from '@astro-utils/context';
import {createUniqueContinuanceName} from '../../dist/form-tools/connectId.js';
import {isPost, validateAction} from '../../dist/form-tools/post.js';

export interface Props<T extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>> extends astroHTML.JSX.ButtonHTMLAttributes {
    onClick: Function;
    connectId?: string;
    whenFormOK?: boolean;
    as?: T;
    props?: React.ComponentProps<T>;
}

const {as: asComponent = 'button', props: componentProps, onClick, whenFormOK, connectId = createUniqueContinuanceName(onClick), ...props} = Astro.props;
const {bind, executeAfter} = getContext(Astro, '@astro-utils/forms');

async function executeFormAction(callback = onClick) {
    const checkFormValidation = whenFormOK && !bind?.errors.length || !whenFormOK;
    if (isPost(Astro) && await validateAction(Astro, 'button-callback', connectId) && checkFormValidation) {
        await callback();
    }
}

if (executeAfter) {
    executeAfter.push(executeFormAction);
} else {
    throw new Error('Use BButton inside a BindForm component');
}

const Component = asComponent as any;
---
<Component type="submit" name="button-callback" value={connectId} {...props} {...componentProps}>
    <slot/>
</Component>
