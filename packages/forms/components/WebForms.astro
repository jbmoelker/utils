---
import { asyncContext } from '@astro-metro/context';
import { createFormToken } from '../dist/form-tools/csrf.js';
import { FORM_OPTIONS } from '../dist/settings.js';

export interface Props extends astroHTML.JSX.FormHTMLAttributes {
}

let formRequestToken = FORM_OPTIONS.session?.cookieOptions?.maxAge && await createFormToken(Astro as any, FORM_OPTIONS.csrf);
let htmlSolt: string;

const context = {
    ...Astro.props,
    webFormsSettings: {haveFileUpload: false}
};

try {
    htmlSolt = await asyncContext(() => Astro.slots.render('default'), Astro, {name: "@astro-metro/forms", context});
} finally {
    //@ts-ignore
    const deleteMethods = Astro.request.formData?.deleteFiles ?? [];
    deleteMethods.forEach((func: Function) => func());
}

const {webFormsSettings, ...props} = context;
if(webFormsSettings.haveFileUpload){
    props.enctype = 'multipart/form-data';
}
---
<form method="post" {...props}>
    {formRequestToken && <input type="hidden" name={formRequestToken.filed} value={formRequestToken.token} />}
    <Fragment set:html={htmlSolt} />    
</form>