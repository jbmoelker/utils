---
import getContext from '@astro-utils/context';
import {validateFormInput} from '../../components-control/input-parse.js';
import {validateFrom} from '../../form-tools/csrf.js';
import {ModifyDeep} from '../../utils.js';
import {getProperty} from 'dot-prop';
import { addOnSubmitClickEvent } from '../../form-tools/events.js';

interface ModifyInputProps {
    minlength?: number;
    maxlength?: number;
}

export interface Props<T extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>> extends Partial<ModifyDeep<astroHTML.JSX.TextareaHTMLAttributes, ModifyInputProps>> {
    name: string;
    errorMessage?: string;
    validate?: Function;
    as?: T;
    props?: React.ComponentProps<T>;
    onSubmitClick?: string;
};

const {bind, method, onSubmitClickGlobal, bindCounter = ''} = getContext(Astro, '@astro-utils/forms');
if (!Astro.props.disabled && method === 'POST' && await validateFrom(Astro)) {
    await validateFormInput(Astro, bind, bindCounter);
}

const {as: asComponent = 'textarea', props: componentProps, value: defaultValue, onSubmitClick = onSubmitClickGlobal, ...props} = Astro.props;
addOnSubmitClickEvent(onSubmitClick, props);

const value = getProperty(bind, Astro.props.name, await Astro.slots.render('default') ?? defaultValue);

const Component = asComponent as any;
---
<Component {...props} {...componentProps}>{value}</Component>
