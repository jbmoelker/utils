---
import getContext from '@astro-utils/context';
import { caseTypes, inputReturnValueAttr, validateFormInput } from '../../components-control/input-parse.js';
import { validateFrom } from '../../form-tools/csrf.js';
import { ModifyDeep } from '../../utils.js';

type inputTypes = astroHTML.JSX.InputHTMLAttributes['type'] | 'int';

interface ModifyInputProps {
    type?: inputTypes;
    pattern?: RegExp;
    minlength?: number;
    maxlength?: number;
    value?: string | string[] | number | Date | null | undefined | boolean;
    max?: number | string | undefined | null | Date;
    min?: number | string | undefined | null | Date;
}

export interface Props<T extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>> extends Partial<ModifyDeep<astroHTML.JSX.InputHTMLAttributes, ModifyInputProps>> {
    name: string;
    errorMessage?: string;
    validate?: Function;
    as?: T;
    props?: React.ComponentProps<T>;
}

const { bind, method, webFormsSettings } = getContext(Astro, '@astro-utils/forms');
if (!Astro.props.disabled && method === 'POST' && (await validateFrom(Astro))) {
    await validateFormInput(Astro, bind);
}

const { as: asComponent = 'input', props: componentProps, type = 'text', pattern, ...props } = Astro.props;
const castProps = caseTypes(type);
const inputValue = inputReturnValueAttr(Astro, bind);

const allProps = { ...props, ...inputValue, ...componentProps, pattern: pattern?.toString(), ...castProps };
webFormsSettings.haveFileUpload ||= allProps.type === 'file';

const Component = asComponent as any;
---

<Component {...allProps} />
