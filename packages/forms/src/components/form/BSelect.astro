---
import getContext, {asyncContext} from '@astro-utils/context';
import {getSelectValue, validateSelect} from '../../components-control/select.js';
import {validateFrom} from '../../form-tools/csrf.js';

export interface Props<T extends keyof JSX.IntrinsicElements | React.JSXElementConstructor<any>> extends astroHTML.JSX.SelectHTMLAttributes {
    name: string
    errorMessage?: string
    type?: 'string' | 'number' | 'date',
    as?: T;
    props?: React.ComponentProps<T>;
};

const {bind, method} = getContext(Astro, '@astro-utils/forms');

const {as: asComponent = 'select', props: componentProps, value: defaultValue, ...props} = Astro.props;
let value = bind[Astro.props.name] ?? defaultValue;

if (!Astro.props.disabled && method === 'POST' && await validateFrom(Astro)) {
    await validateSelect(Astro, bind);
    value = await getSelectValue(Astro);
}


const isValueNotArray = !Array.isArray(value);
if (isValueNotArray) {
    value = value != null ? [value] : [];
}

const Component = asComponent as any;
const context = {name: Astro.props.name, value, allowSelected: isValueNotArray};
const htmlSolt = await asyncContext(() => Astro.slots.render('default'), Astro, {name: '@astro-utils/forms', context, lock: "select"});
---
<Component {...props} {...componentProps}>
    <Fragment set:html={htmlSolt}/>
</Component>
