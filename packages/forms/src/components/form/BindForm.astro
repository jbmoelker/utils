---
import { asyncContext } from '@astro-utils/context';
import getContext from '@astro-utils/context';
import ViewStateManager from '../../components-control/form-utils/view-state.js';
import Bind from '../../components-control/form-utils/bind-form.js';

export interface Props {
    bind?: ReturnType<typeof Bind>;
    state?: boolean | string[];
    omitState?: string[];
    defaultSubmitClick?: string | false;
}

const { viewStates, lastRender: parantLastRender, bindCounter: parantBindCounter = '' } = getContext(Astro, '@astro-utils/forms');
if (parantLastRender === false) {
    return;
}

const { bind = Bind(), defaultSubmitClick } = Astro.props;
const context = {
    executeAfter: [],
    method: 'GET',
    bind,
    tempBindValues: {},
    elementsState: {} as any,
    onSubmitClickGlobal: defaultSubmitClick,
    buttonIds: [] as [string, string | null, boolean][],
    settings: { showValidationErrors: false },
    bindCounter: viewStates.counter++,
    lastRender: false,
    newState: false
};

const resetContext = () => {
    context.buttonIds = [];
    context.tempBindValues = {};
    context.executeAfter = [];
};

const viewState = new ViewStateManager(bind, context.elementsState, Astro, context.bindCounter);
context.newState = !await viewState.loadState();
await bind.on.stateLoaded?.();
if (context.newState) {
    await bind.on.newState?.();
}

// For some resone the first render, in astro appenning in the oppesit direction, memning it first return the html and than runs the logic?
await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parantBindCounter });
resetContext();
// Get information about the form
context.method = context.newState ? 'GET': Astro.request.method;
await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parantBindCounter });
bind.__finishFormValidation();

if (context.method == 'POST') {
    if(!context.newState){
        await bind.on.pagePostBack?.();
    }
    for (const func of context.executeAfter) {
        await (func as any)();
    }

    context.method = 'GET';
    resetContext();

    await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parantBindCounter });
}

// Edit form render, add default submit button
if (context.onSubmitClickGlobal == null && context.buttonIds.length > 0) {
    const [buttonFormId, HTMLButtonId] = context.buttonIds.findLast(([, , whenFormOk]) => whenFormOk) ?? context.buttonIds.at(-1)!;
    const state = (context.elementsState[buttonFormId] ??= {});

    state.id = HTMLButtonId ?? `_${buttonFormId}`;
    context.onSubmitClickGlobal = state.id;
}

resetContext();
context.lastRender = true;
const htmlSolt = await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parantBindCounter });
---

<input type='hidden' name={viewState.filedName} value={await viewState.createViewState()} />
<Fragment set:html={htmlSolt} />
