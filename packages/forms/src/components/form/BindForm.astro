---
import { asyncContext } from '@astro-utils/context';
import getContext from '@astro-utils/context';
import ViewStateManager from '../../components-control/form-utils/view-state.js';
import Bind from '../../components-control/form-utils/bind-form.js';

export interface Props {
    bind?: ReturnType<typeof Bind>;
    state?: boolean | string[];
    omitState?: string[];
    defaultSubmitClick?: string | false;
}

const { viewStates, bindCounter: parantBindCounter = '' } = getContext(Astro, '@astro-utils/forms');
const { bind = Bind(), defaultSubmitClick } = Astro.props;
const context = {
    executeAfter: [],
    method: 'GET',
    bind,
    tempBindValues: {},
    elementsState: {} as any,
    onSubmitClickGlobal: defaultSubmitClick,
    buttonIds: [] as [string, string | null, boolean][],
    settings: {showValidationErrors: false},
    bindCounter: viewStates.incCounter(bind)
};

const viewState = new ViewStateManager(bind, context.elementsState, Astro, context.bindCounter);
const haveState = await viewState.loadState();

await bind.on.stateLoaded?.();

if (!haveState) {
    await bind.on.newState?.();
} else {
    await bind.on.pagePostBack?.();
}

// Get information about the form
await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parantBindCounter });

// resert the form execution
context.tempBindValues = {};
context.executeAfter = [];

// first 'GET' render
context.method = Astro.request.method;
let htmlSolt = await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parantBindCounter });
bind.__finishFormValidation();

for (const func of context.executeAfter) {
    await (func as any)();
}

if (context.method == 'POST') {
    context.method = 'GET';
    context.tempBindValues = {};
    htmlSolt = await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parantBindCounter });
}

// Edit form render, add default submit button
if (context.onSubmitClickGlobal == null && context.buttonIds.length > 0) {
    const [buttonFormId, HTMLButtonId] = context.buttonIds.findLast(([,,whenFormOk]) => whenFormOk) ?? context.buttonIds.at(-1)!;
    const state = (context.elementsState[buttonFormId] ??= {});

    state.id = HTMLButtonId ?? `_${buttonFormId}`;
    context.onSubmitClickGlobal = state.id;

    context.tempBindValues = {};
    htmlSolt = await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'bindForm' + parantBindCounter });
}
---

{viewState.useState ? <input type='hidden' name={viewState.filedName} value={await viewState.createViewState()} /> : null}
<Fragment set:html={htmlSolt} />
