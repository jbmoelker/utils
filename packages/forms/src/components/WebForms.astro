---
import { asyncContext } from '@astro-utils/context';
import { createFormToken } from '../form-tools/csrf.js';
import { getFormOptions } from '../settings.js';

export interface Props extends astroHTML.JSX.FormHTMLAttributes {}

const context = {
    ...Astro.props,
    webFormsSettings: { haveFileUpload: false },
    tempValues: {},
    viewStates: {
        counterHash: new Map<any, number>(),
        lastCounter: 0,
        incCounter(ref: any){
            const haveCounter = context.viewStates.counterHash.get(ref);
            if(haveCounter) {
                return haveCounter;
            }
            
            context.viewStates.counterHash.set(ref, context.viewStates.lastCounter);
            return context.viewStates.lastCounter++;
        }
    },
};

const htmlSolt = await asyncContext(() => Astro.slots.render('default'), Astro, { name: '@astro-utils/forms', context, lock: 'webForms' });

const { webFormsSettings, tempValues, viewStates, ...props } = context;
if (webFormsSettings.haveFileUpload) {
    props.enctype = 'multipart/form-data';
}

const useSession = getFormOptions(Astro).session?.cookieOptions?.maxAge;
const formRequestToken = useSession && (await createFormToken(Astro));
const clientScript = Astro.locals.forms.scriptToRun;
---

<form method='post' {...props}>
    {formRequestToken && <input type='hidden' name={formRequestToken.filed} value={formRequestToken.token} />}
    <Fragment set:html={htmlSolt} />
    {clientScript && <script set:html={clientScript} />}
</form>
<script>
    declare global {
        interface Window {
            __enterToSubmit: (event: KeyboardEvent, id: string) => void;
            submitForm(value: HTMLElement | string): void;
        }
    }

    window.__enterToSubmit = function (event) {
        if (event.code === 'Enter') {
            event.preventDefault();
            document.getElementById((event.target as HTMLElement).getAttribute('data-submit')!)?.click();
        }
    };

    window.submitForm = function (value: any) {
        if (typeof value !== 'string') {
            value = value.getAttribute('data-submit');
        }
        if(value == null){
            return console.warn('submitForm: value is null, make sure you pass `this` to this method or an id of the button you want to submit.');
        }
        document.getElementById(value)?.click();
    };
</script>
